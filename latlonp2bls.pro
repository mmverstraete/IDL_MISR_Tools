FUNCTION latlonp2bls, $
   misr_path, $
   misr_resol, $
   latitude, $
   longitude, $
   misr_block, $
   misr_line, $
   misr_sample, $
   DEBUG = debug, $
   EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function identifies the BLOCK, LINE and SAMPLE
   ;  coordinates of the MISR pixel closest to the specified latitude and
   ;  longitude, and updates the latitude and longitude to reflect the
   ;  geographical coordinates of the center of that closest pixel.
   ;
   ;  ALGORITHM: This function converts the geographical coordinates
   ;  (latitude and longitude, in decimal degrees) of a specified
   ;  location, within a given MISR PATH into the BLOCK, LINE and SAMPLE
   ;  coordinates of the center of the closest pixel within that PATH, and
   ;  then computes and returns the latitude and longitude, in decimal
   ;  degrees, of that center pixel.
   ;
   ;  SYNTAX:
   ;  rc = latlonp2bls(misr_path, misr_resol, latitude, longitude, $
   ;  misr_block, misr_line, misr_sample, $
   ;  DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   misr_path {INT} [I]: The selected MISR PATH number.
   ;
   ;  *   misr_resol {INT} [I]: The selected MISR spatial resolution
   ;      (either 275 or 1100 m).
   ;
   ;  *   latitude {DOUBLE} [I/O]: The latitude of a location of interest
   ;      on input, the latitude of the center of the nearest pixel on
   ;      output.
   ;
   ;  *   longitude {DOUBLE} [I/O]: The longitude of a location of
   ;      interest on input, the longitude of the center of the nearest
   ;      pixel on output.
   ;
   ;  *   misr_block {INT} [O]: The MISR BLOCK number containing that
   ;      location.
   ;
   ;  *   misr_line {INT} [O]: The line number of the closest pixel to the
   ;      specified location with the indicated BLOCK.
   ;
   ;  *   misr_sample {INT} [O]: The sample number of the closest pixel to
   ;      the specified location with the indicated BLOCK.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   DEBUG = debug {INT} [I] (Default value: 0): Flag to activate (1)
   ;      or skip (0) debugging tests.
   ;
   ;  *   EXCPT_COND = excpt_cond {STRING} [O] (Default value: ”):
   ;      Description of the exception condition if one has been
   ;      encountered, or a null string otherwise.
   ;
   ;  RETURNED VALUE TYPE: INT.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters latitude,
   ;      longitude, misr_block, misr_line, misr_sample contain the
   ;      results generated by this function.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns a non-zero error code, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. The output positional parameters may be undefined,
   ;      incomplete or incorrect.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 100: One or more positional parameter(s) are missing.
   ;
   ;  *   Error 110: The input positional parameter misr_path is invalid.
   ;
   ;  *   Error 120: The input positional parameter misr_resol is invalid.
   ;
   ;  *   Error 130: The input positional parameter latitude is not a
   ;      scalar number or lies outside of the range [ − 90.0,  + 90.0].
   ;
   ;  *   Error 140: The input positional parameter longitude is not a
   ;      scalar number or lies outside of the range [ − 180.0,  + 180.0].
   ;
   ;  *   Error 600: An exception condition occurred in the MISR TOOLKIT
   ;      routine
   ;      MTK_LATLON_TO_BLS.
   ;
   ;  *   Error 610: An exception condition occurred in the MISR TOOLKIT
   ;      routine
   ;      MTK_BLS_TO_LATLON.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   MISR Toolkit
   ;
   ;  *   chk_misr_path.pro
   ;
   ;  *   chk_misr_resol.pro
   ;
   ;  *   is_numeric.pro
   ;
   ;  *   is_scalar.pro
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS:
   ;
   ;  *   NOTE 1: The positional parameters latitude and longitude are
   ;      modified on output to reflect the geographical coordinates of
   ;      the center of the pixel closest to the location specified in
   ;      input.
   ;
   ;  *   NOTE 2: The finest spatial sampling distance of the MISR
   ;      instrument is 275 m. Along a meridian, this corresponds to just
   ;      under 9 arc seconds or 0.0024 arc degree, so geographical
   ;      coordinates should be specified with at least 5 significant
   ;      digits to uniquely designate a particular pixel. See the
   ;      examples below.
   ;
   ;  EXAMPLES:
   ;
   ;      IDL> misr_path = 169
   ;      IDL> misr_resol = 275
   ;      IDL> latitude = -27.360
   ;      IDL> longitude = 30.130
   ;      IDL> rc = latlonp2bls(misr_path, misr_resol, $
   ;         latitude, longitude, misr_block, misr_line, misr_sample)
   ;      IDL> PRINT, misr_block, misr_line, misr_sample
   ;               112         399        1135
   ;      IDL> latitude = -27.361
   ;      IDL> rc = latlonp2bls(misr_path, misr_resol, $
   ;         latitude, longitude, misr_block, misr_line, misr_sample)
   ;      IDL> PRINT, misr_block, misr_line, misr_sample
   ;               112         399        1135
   ;      IDL> latitude = -27.362
   ;      IDL> rc = latlonp2bls(misr_path, misr_resol, $
   ;         latitude, longitude, misr_block, misr_line, misr_sample)
   ;      IDL> PRINT, misr_block, misr_line, misr_sample
   ;               112         400        1135
   ;
   ;  REFERENCES: None.
   ;
   ;  VERSIONING:
   ;
   ;  *   2019–06–09: Version 1.0 — Initial public release.
   ;
   ;  *   2019–06–10: Version 2.00 — Systematic update of all routines to
   ;      implement stricter coding standards and improve documentation.
   ;
   ;  *   2019–08–20: Version 2.1.0 — Adopt revised coding and
   ;      documentation standards (in particular regarding the assignment
   ;      of numeric return codes), and switch to 3-parts version
   ;      identifiers.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2020 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following three
   ;      conditions:
   ;
   ;      1. The above copyright notice and this permission notice shall
   ;      be included in their entirety in all copies or substantial
   ;      portions of the Software.
   ;
   ;      2. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY
   ;      KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
   ;      WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
   ;      AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;      3. The current version of this Software is freely available from
   ;
   ;      https://github.com/mmverstraete.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com
   ;Sec-Cod

   COMPILE_OPT idl2, HIDDEN

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code:
   return_code = 0

   ;  Set the default values of flags and essential output keyword parameters:
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0
   excpt_cond = ''

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 7
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): misr_path, misr_resol, ' + $
            'latitude, longitude, misr_block, misr_line, misr_sample.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_path' is invalid:
      rc = chk_misr_path(misr_path, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 110
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'misr_resol' is invalid:
      rc = chk_misr_resol(misr_resol, DEBUG = debug, EXCPT_COND = excpt_cond)
      IF (rc NE 0) THEN BEGIN
         error_code = 120
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': ' + excpt_cond
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'latitude' is invalid:
      IF ((is_numeric(latitude) NE 1) OR $
         (is_scalar(latitude) NE 1) OR $
         (latitude LT -90.0) OR $
         (latitude GT 90.0)) THEN BEGIN
         error_code = 130
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': The latitude must be a scalar number in the range ' + $
            '[-90.0, +90.0].'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'longitude' is invalid:
      IF ((is_numeric(longitude) NE 1) OR $
         (is_scalar(longitude) NE 1) OR $
         (longitude LT -180.0) OR $
         (longitude GT 180.0)) THEN BEGIN
         error_code = 140
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': The longitude must be a scalar number in the range ' + $
            '[-180.0, +180.0].'
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Ensure that the latitude and longitude coordinates are set in double
   ;  precision:
   latitude = DOUBLE(latitude)
   longitude = DOUBLE(longitude)

   ;  Convert the input latitude, longitude and Path specification into the
   ;  corresponding Block/Line/Sample coordinates of the center of the
   ;  closest pixel:
   status = MTK_LATLON_TO_BLS(misr_path, misr_resol, latitude, longitude, $
      misr_block, line, sample)
   IF (status NE 0) THEN BEGIN
      error_code = 600
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': MTK status = ' + strstr(status) + ': ' + $
         MTK_ERROR_MESSAGE(status) + ', The location specified by ' + $
         'latitude and longitude is not observable by MISR from Path ' + $
         strstr(misr_path) + '.'
      RETURN, error_code
   ENDIF
   misr_line = ROUND(line)
   misr_sample = ROUND(sample)

   ;  Reset the latitude and longitude to the coordinates of the center of
   ;  this pixel:
   status = MTK_BLS_TO_LATLON(misr_path, misr_resol, misr_block, misr_line, $
      misr_sample, latitude, longitude)
   IF (status NE 0) THEN BEGIN
      error_code = 610
      excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
         ': MTK status = ' + strstr(status) + ': ' + $
         MTK_ERROR_MESSAGE(status) + ', The location specified by ' + $
         'misr_block, misr_line, misr_sample does not correspond to a ' + $
         'latitude and longitude within the MISR Path ' + $
         strstr(misr_path) + '.'
      RETURN, error_code
   ENDIF

   RETURN, return_code

END
